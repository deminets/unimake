#
# license: Apache-2.0 license
# project: UniMake, https://github.com/deminets/unimake
# file: unimake.mki
# virsion: 1.0.9
# date: 30.10.2015
# update: 19.09.2017
# author: Deminets Sergey
# copyright: Deminets Sergey, 2015
# brief: Универсальный Makefile - Universal makefile
#

.DEFAULT_GOAL := all

# В переменной GD_INCLUDE_MAKEFILES можно указать глобальный include
ifdef GD_INCLUDE_MAKEFILES
-include $(GD_INCLUDE_MAKEFILES)
endif

# Консольные команды
CD		?= cd
MKDIR		?= mkdir -p
RM		?= rm -f
MAKE		?= make
COPY		?= cp
export CD MKDIR RM MAKE COPY
# Команды сборки
CCSUFIX		?= gcc
CC		?= $(CROSS_COMPILE)$(CCSUFIX)
CP		?= g++
LINK		?= $(CC)
LD		?= $(CC)
AR		?= ar
export LINK CC CP LD AR

# Глобальные переменные
OBJS_DIR	?= ./.objs
BINS_DIR	?= ./.bins
DOCS_DIR	?= ./.docs
export UNIMAKE_RECURSIVE_LIMIT

# asm=ASFLAGS c=CCFLAGS cpp=CPPFLAGS ld=LDFLAGS
# lib ar=ARFLAGS

#============================================
# Заполнение целей по умолчанию
ifndef bins-t
ifndef libs-t
bins-t := $(notdir $(abspath .))
$(bins-t)-srcs := $(foreach file,$(wildcard *.c),$(file)) $(foreach file,$(wildcard *.cpp),$(file))
bins-t := $(if $(strip $($(bins-t)-srcs)),$(bins-t),)
endif
endif

#============================================
# Заполнение рекурсивных целей с учётом ограничения в переменной UNIMAKE_RECURSIVE_LIMIT
ifneq '$(UNIMAKE_RECURSIVE_LIMIT)' '$(MAKELEVEL)'
dirs-t := $(strip $(foreach file,$(wildcard *),$(if $(wildcard ./$(file)/*akefile),$(file))))
endif

#============================================
PHONY += all
all : build_all_targets
	@:

#============================================
# Флаги сборки
define obj_flags
$(2)-ccflags_tmp := $$(shell $(CC) -E -MM $(2) -DUNIMAKE_GET_FLAGS 2>&1)
$(2)-ccflags_ext := $$(subst :, ,$$(subst CCFLAGS:,,$$(word 1,$$(filter CCFLAGS:%,$$($(2)-ccflags_tmp)))))
$(1)-ldflags_ext += $$(subst :, ,$$(subst LDFLAGS:,,$$(word 1,$$(filter LDFLAGS:%,$$($(2)-ccflags_tmp)))))

$(2)-ccflags_all := $$(sort $$(if $$($$(2)-ccflags_exc),$$($$(2)-ccflags_exc),$$($(1)-ccflags_add) $$($$(2)-ccflags_add) $$($(2)-ccflags_ext)))
endef
#============================================
# Сборка отдельных объектных модулей
define object_build_gcc

$(eval $(call obj_flags,$(1),$(2),$(3)))

$(OBJS_DIR)/$(1)/$(patsubst ../%,%,$(filter-out ./,$(dir $(2))))$(filter-out \,$(shell $(CC) -MM $(2) $($(2)-ccflags_all) ))
		@$(MKDIR) "$$(dir $$@)"
		@echo "  [$(3)] $$@ $$< $$($(2)-ccflags_all)"
		@$($(3)) -c $$< -o $$@ $$($(2)-ccflags_all)
endef

#============================================
# Сборка целей, линковка
define func_target_build

$(1)-ccsrcs := $(filter %.c,$(wildcard $(sort $($(1)-srcs))))
$(1)-ccobjs := $$(patsubst ../%,%,$$(patsubst %.c,%.o,$$($(1)-ccsrcs)))
$(1)-cpsrcs := $(filter %.cpp,$(wildcard $(sort $($(1)-srcs))))
$(1)-cpobjs := $$(patsubst ../%,%,$$(patsubst %.cpp,%.o,$$($(1)-cpsrcs)))
$(1)-target_objs := $$($(1)-ccobjs:%=$(OBJS_DIR)/$(1)/%) $$($(1)-cpobjs:%=$(OBJS_DIR)/$(1)/%)

$(foreach src,$(filter %.c,$(wildcard $(sort $($(1)-srcs)))),$(eval $(call object_build_gcc,$(1),$(src),CC)))
$(foreach src,$(filter %.cpp,$(wildcard $(sort $($(1)-srcs)))),$(eval $(call object_build_gcc,$(1),$(src),CP)))

$(OBJS_DIR)/$(1) :
	@echo "  [MD] $$@"
	@$(MKDIR) $$@

$(1)-ldflags_all := $$(sort $$($(1)-ldflags_add) $$($(1)-ldflags_ext))

$(BINS_DIR)/$(1) : $(OBJS_DIR)/$(1) $$($(1)-target_objs)
ifeq ($(2),0)
	@echo "  [LD] $$@ $$($(1)-ldflags_all)"
	@$(LINK) -o $$@ $$($(1)-target_objs) $$($(1)-objs_add) $$($(1)-ldflags_all)
else
	@echo "  [AR] $$@ $$($(1)-ldflags_all)"
	@$(AR) rcs $$@ $$($(1)-target_objs) $$($(1)-objs_add) $$($(1)-ldflags_all)
endif
	@:

$(1)-target_clean := $(BINS_DIR)/$(1) $(OBJS_DIR)/$(1)
PHONY += $(1)-target_clean
$(1)-target_clean :
	@echo "  [RM] $(1)"
	@$(RM) -r $(BINS_DIR)/$(1) $(OBJS_DIR)/$(1)
	@:
endef

# Разворачиваем список целей
$(foreach trg,$(bins-t),$(eval $(call func_target_build,$(trg),0)))
$(foreach trg,$(libs-t),$(eval $(call func_target_build,$(trg),1)))

#============================================
# Создаём папку для результатов линковки
$(BINS_DIR) :
	@echo "  [MD] $(BINS_DIR)"
	@$(MKDIR) $(BINS_DIR)

#============================================
# Рекурсивная сборка
define func_target_dirs
PHONY += $(1)-target_dirs
$(1)-target_dirs :
	@echo "  [MK] $(1)"
	@$(MAKE) -C $(1) $(MAKECMDGOALS)
	@:
endef
$(foreach trg,$(dirs-t),$(eval $(call func_target_dirs,$(trg))))
#============================================
PHONY += start_message
start_message :
	@echo "  [MAKE][$(MAKELEVEL)] START $(MAKECMDGOALS)"

PHONY += dirs_targets
dirs_targets : $(foreach rule,$(dirs-t),$(rule)-target_dirs)
	@:

PHONY += end_message
end_message :
	@echo "  [MAKE][$(MAKELEVEL)] STOP  $(MAKECMDGOALS)"

#============================================
PHONY += build_all_targets
build_all_targets : start_message dirs_targets $(if $(strip $(bins-t)$(libs-t)),$(BINS_DIR)) $(libs-t:%=$(BINS_DIR)/%) $(bins-t:%=$(BINS_DIR)/%) end_message
	@:

#============================================
PHONY += clean
clean : start_message dirs_targets $(foreach rule,$(bins-t)$(libs-t),$(if $(wildcard $($(rule)-target_clean)),$(rule)-target_clean)) end_message
	@:

#============================================
PHONY += doxygen
doxygen :
#	$(info $(L_DOX_DIRS))
	@:

#============================================
# Цель по умолчанию, предназначена для вывода ошибок
.DEFAULT:
	$(warning !!!WARNING!!!: not found rule for target = '$(@)')
	@:

#============================================
# Абстрактные цели
.PHONY : $(PHONY)
#============================================
# -== END OF FILE ==-
#============================================
